{% import "utils.inc.jinja" as utils %}
{{- utils.do_not_edit() }}
// This file was generated from {{ proto.source_file }}
#pragma once

{# All constant includes must go inside this header #}
// STD
#include <memory>

// PROTOBUF
#include "{{ proto.source_file_without_ext }}.pb.h"

// THIS
#include <ReferenceCounting/AtomicImpl.hpp>
#include <ReferenceCounting/SmartPtr.hpp>
#include <UServerUtils/Grpc/Common/TypeTraits.hpp>
#include <UServerUtils/Grpc/Server/CommonContextCoro.hpp>
#include <UServerUtils/Grpc/Server/DefaultErrorCreator.hpp>
#include <UServerUtils/Grpc/Server/RpcHandlerImpl.hpp>
#include <UServerUtils/Grpc/Server/ServiceCoro.hpp>

{% call utils.optional_namespace(proto.namespace) %}
{% for service in proto.services %}
{% for method in service.method %}

namespace Internal::Server
{

struct {{service.name}}_{{method.name}}_Method final
{
  static constexpr const char* method_name()
  {
    return "/{{proto.package_prefix}}{{service.name}}/{{method.name}}";
  }

  {% if method.client_streaming and method.server_streaming %}
  using IncomingType = UServerUtils::Grpc::Common::Stream<{{ method.input_type | grpc_to_cpp_name }}>;
  using OutgoingType = UServerUtils::Grpc::Common::Stream<{{ method.output_type | grpc_to_cpp_name }}>;
  {% elif method.client_streaming %}
  using IncomingType = UServerUtils::Grpc::Common::Stream<{{ method.input_type | grpc_to_cpp_name }}>;
  using OutgoingType = {{ method.output_type | grpc_to_cpp_name }};
  {% elif method.server_streaming %}
  using IncomingType = {{ method.input_type | grpc_to_cpp_name }};
  using OutgoingType = UServerUtils::Grpc::Common::Stream<{{ method.output_type | grpc_to_cpp_name }}>;
  {% else %}
  using IncomingType = {{ method.input_type | grpc_to_cpp_name }};
  using OutgoingType = {{ method.output_type | grpc_to_cpp_name }};
  {% endif %}
};

} // namespace Internal::Server

using {{service.name}}_{{method.name}}_Handler =
  UServerUtils::Grpc::Server::RpcHandlerImpl<Internal::Server::{{service.name}}_{{method.name}}_Method>;

namespace Internal
{

class {{service.name}}_{{method.name}}_Coro_Handler final
  : public {{service.name}}_{{method.name}}_Handler
{
public:
  using Logger_var = Logging::Logger_var;
  using Traits = typename {{service.name}}_{{method.name}}_Handler::Traits;
  using Request = typename Traits::Request;
  using Response = typename Traits::Response;
  using ServiceCoro_var = typename UServerUtils::Grpc::Server::ServiceCoro_var<Request, Response>;
  using ServiceMode = UServerUtils::Grpc::Server::ServiceMode;
  using ReadStatus = UServerUtils::Grpc::Server::ReadStatus;
  using TaskProcessor = userver::engine::TaskProcessor;
  using Queue = UServerUtils::Grpc::Server::Internal::QueueCoro<Request, Response>;
  using QueueData = typename Queue::ValueType;
  using Producer = typename Queue::Producer;
  using ProducerPtr = std::unique_ptr<Producer>;
  using DefaultErrorCreatorPtr =
    UServerUtils::Grpc::Server::DefaultErrorCreatorPtr<Response>;
  using FactoryDefaultErrorCreatorPtr =
    UServerUtils::Grpc::Server::FactoryDefaultErrorCreatorPtr<Request, Response>;

  DECLARE_EXCEPTION(Exception, eh::DescriptiveException);

public:
  {{service.name}}_{{method.name}}_Coro_Handler() = default;

  ~{{service.name}}_{{method.name}}_Coro_Handler() = default;

  void on_request(std::unique_ptr<{{ method.input_type | grpc_to_cpp_name }}>&& request) override
  {
    try
    {
      auto writer = get_writer(*request);
      if (producer_)
      {
        QueueData data(
          QueueData::Type::Read,
          std::move(request),
          std::move(writer),
          reinterpret_cast<std::uintptr_t>(this));
        if (!producer_->PushNoblock(std::move(data)))
        {
          Stream::Error stream;
          stream << FNS
                 << "PushNoblock is failed";
          throw Exception(stream);
        }
      }
      else
      {
        auto& context = common_context<
          UServerUtils::Grpc::Server::CommonContextCoro>();
        context.add_coroutine(
          *task_processor_,
          service_.in(),
          ReadStatus::Read,
          std::move(writer),
          std::move(request),
          reinterpret_cast<std::uintptr_t>(this),
          Traits::rpc_type);
      }
    }
    catch (const eh::Exception& exc)
    {
      try
      {
        Stream::Error stream;
        stream << FNS
               << exc.what();
        logger_->error(stream.str());
      }
      catch (...)
      {
      }
    }
  }

  void initialize() override
  {
    try
    {
      auto& context = common_context<
        UServerUtils::Grpc::Server::CommonContextCoro>();
      logger_ = context.get_logger();
      const std::string_view method_name = Traits::method_name();
      const auto& service_info = context.service_info(method_name);
      service_ = std::any_cast<ServiceCoro_var>(service_info.service);
      service_mode_ = service_info.service_mode;
      task_processor_ = service_info.task_processor;
      factory_default_error_creator_ = context.factory_default_error_creator<
        Request, Response>(service_info);

      constexpr auto rpc_type = Traits::rpc_type;
      if (service_mode_ == ServiceMode::RpcToCoroutine
        && rpc_type != grpc::internal::RpcMethod::NORMAL_RPC
        && rpc_type != grpc::internal::RpcMethod::SERVER_STREAMING)
      {
        producer_ = context.get_producer<Request, Response>(service_info);
      }

      if constexpr (rpc_type == grpc::internal::RpcMethod::BIDI_STREAMING
        || rpc_type == grpc::internal::RpcMethod::CLIENT_STREAMING)
      {
        if (producer_)
        {
          QueueData data(
            QueueData::Type::Initialize,
            {},
            {},
            reinterpret_cast<std::uintptr_t>(this));
          if (!producer_->PushNoblock(std::move(data)))
          {
            Stream::Error stream;
            stream << FNS
                   << "PushNoblock is failed";
            throw Exception(stream);
          }
        }
        else
        {
          auto& context = common_context<
            UServerUtils::Grpc::Server::CommonContextCoro>();
          context.add_coroutine(
            *task_processor_,
            service_.in(),
            ReadStatus::Initialize,
            {},
            {},
            reinterpret_cast<std::uintptr_t>(this),
            Traits::rpc_type);
        }
      }
    }
    catch (const eh::Exception& exc)
    {
      try
      {
        auto status = grpc::Status::CANCELLED;
        finish(std::move(status));

        Stream::Error stream;
        stream << FNS
               << exc.what();
        logger_->error(stream.str());
      }
      catch (...)
      {
      }
    }
  }

  void on_reads_done() override
  {
    constexpr auto rpc_type = Traits::rpc_type;
    if constexpr (rpc_type == grpc::internal::RpcMethod::NORMAL_RPC
      || rpc_type == grpc::internal::RpcMethod::SERVER_STREAMING)
    {
      return;
    }

    try
    {
      auto writer = get_writer(grpc::StatusCode::CANCELLED);
      if (producer_)
      {
        QueueData data(
          QueueData::Type::ReadsDone,
          {},
          std::move(writer),
          reinterpret_cast<std::uintptr_t>(this));
        if (!producer_->PushNoblock(std::move(data)))
        {
          Stream::Error stream;
          stream << FNS
                 << "PushNoblock is failed";
        }
      }
      else
      {
        auto& context = common_context<
          UServerUtils::Grpc::Server::CommonContextCoro>();
        context.add_coroutine(
          *task_processor_,
          service_.in(),
          ReadStatus::ReadsDone,
          std::move(writer),
          {},
          reinterpret_cast<std::uintptr_t>(this),
          Traits::rpc_type);
      }
    }
    catch (const eh::Exception& exc)
    {
      try
      {
        auto status = grpc::Status::CANCELLED;
        finish(std::move(status));

        Stream::Error stream;
        stream << FNS
               << exc.what();
        logger_->error(stream.str());
      }
      catch (...)
      {
      }
    }
  }

  void on_finish() override
  {
    constexpr auto rpc_type = Traits::rpc_type;
    if constexpr (rpc_type == grpc::internal::RpcMethod::NORMAL_RPC
      || rpc_type == grpc::internal::RpcMethod::SERVER_STREAMING)
    {
      return;
    }

    try
    {
      if (producer_)
      {
        QueueData data(
          QueueData::Type::RpcFinish,
          {},
          {},
          reinterpret_cast<std::uintptr_t>(this));
        if (!producer_->PushNoblock(std::move(data)))
        {
          Stream::Error stream;
          stream << FNS
                 << "PushNoblock is failed";
          throw Exception(stream);
        }
      }
      else
      {
        auto& context = common_context<
          UServerUtils::Grpc::Server::CommonContextCoro>();
        context.add_coroutine(
          *task_processor_,
          service_.in(),
          ReadStatus::RpcFinish,
          {},
          {},
          reinterpret_cast<std::uintptr_t>(this),
          Traits::rpc_type);
      }
    }
    catch (const eh::Exception& exc)
    {
      try
      {
        Stream::Error stream;
        stream << FNS
               << exc.what();
        logger_->error(stream.str());
      }
      catch (...)
      {
      }
    }

    producer_.reset();
  }

  DefaultErrorCreatorPtr default_error_creator(
    const Request& request) noexcept override
  {
    return factory_default_error_creator_->create(request);
  }

private:
  Logger_var logger_;

  FactoryDefaultErrorCreatorPtr factory_default_error_creator_;

  ServiceCoro_var service_;

  TaskProcessor* task_processor_ = nullptr;

  std::unique_ptr<Producer> producer_;

  ServiceMode service_mode_ = ServiceMode::EventToCoroutine;
};

} // namespace Internal

class {{service.name}}_{{method.name}}_Service :
  public UServerUtils::Grpc::Server::ServiceCoro<{{ method.input_type | grpc_to_cpp_name }}, {{ method.output_type | grpc_to_cpp_name }}>
{
public:
  using Handler = Internal::{{service.name}}_{{method.name}}_Coro_Handler;
  using Request = typename Handler::Request;
  using Response = typename Handler::Response;
  using ReadStatus = UServerUtils::Grpc::Server::ReadStatus;
  using WriterStatus = UServerUtils::Grpc::Server::WriterStatus;
  using DefaultErrorCreatorPtr = UServerUtils::Grpc::Server::DefaultErrorCreatorPtr<Response>;

protected:
  {{service.name}}_{{method.name}}_Service() = default;

  ~{{service.name}}_{{method.name}}_Service() override = default;
};

using {{service.name}}_{{method.name}}_Service_var =
  ReferenceCounting::SmartPtr<{{service.name}}_{{method.name}}_Service>;

{% endfor %} {% endfor %}
{% endcall %} {# utils.optional_namespace #}